name: Build Jailbreak Tweak

on:
  workflow_dispatch:
    inputs:
      sdk-version:
        description: 'iOS SDK versions (comma separated)'
        required: false
        default: 'iPhoneOS13.7.sdk,iPhoneOS14.5.sdk,iPhoneOS15.6.sdk'
  push:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        sdk: ['iPhoneOS13.7.sdk', 'iPhoneOS14.5.sdk', 'iPhoneOS15.6.sdk']
      fail-fast: false
      max-parallel: 3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Theos
      uses: actions/cache@v3
      with:
        path: |
          ~/theos
          ~/.cache/pip
        key: ${{ runner.os }}-theos-${{ matrix.sdk }}-pycache

    - name: Set up Theos and SDKs
      if: steps.cache-theos.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y git clang curl libxml2-dev libssl-dev python3-dev \
                               fakeroot dpkg-dev libncurses5-dev zlib1g-dev unzip \
                               automake libtool pkg-config coreutils xz-utils
        
        git clone --depth=1 https://github.com/theos/theos.git "${HOME}/theos"
        
        [ -f "${HOME}/theos/makefiles/package.mk" ] || { echo "❌ Theos installation failed!"; exit 1; }
        
        mkdir -p "${HOME}/theos/sdks"
        
        # Download SDK repository as ZIP
        curl -L -o sdks-master.zip https://github.com/theos/sdks/archive/refs/heads/master.zip
        unzip -q sdks-master.zip

        # Case-insensitive SDK search
        sdk_lower=$(echo "${{ matrix.sdk }}" | tr '[:upper:]' '[:lower:]')
        found_dir=$(find sdks-* -maxdepth 1 -type d -iname "*${sdk_lower}*" | head -n1)

        if [ -n "$found_dir" ]; then
            echo "✅ Found SDK: $found_dir"
            cp -R "$found_dir" "${HOME}/theos/sdks/${{ matrix.sdk }}"
        else
            echo "❌ SDK ${{ matrix.sdk }} not found in repository!"
            find sdks-* -maxdepth 1 -type d | sed 's/^/  /'  # List available SDKs
            exit 1
        fi
        rm -rf sdks-master*

        # Verify extraction
        [ -d "${HOME}/theos/sdks/${{ matrix.sdk }}" ] || { 
          echo "❌ SDK ${{ matrix.sdk }} not found after extraction!";
          exit 1;
        }

        curl -LO https://github.com/ProcursusTeam/ldid/releases/latest/download/ldid_linux_x86_64
        chmod +x ldid_linux_x86_64
        sudo mv ldid_linux_x86_64 /usr/local/bin/ldid

    - name: Configure Theos environment
      run: |
        echo "THEOS=${HOME}/theos" >> $GITHUB_ENV
        echo "${HOME}/theos/bin" >> $GITHUB_PATH
        echo "THEOS_MAKE_PATH=${HOME}/theos/makefiles" >> $GITHUB_ENV

    # Add this to your workflow before the build step
    - name: List repository contents
      run: |
        echo "Repository structure:"
        ls -la
        echo "Looking for buildable directories:"
        find . -maxdepth 1 -type d ! -path . -exec sh -c 'echo "{}: $(find {} -name Makefile -o -name Makefile.common | wc -l) Makefiles found"' \;

    - name: Verify directories
      run: |
        echo "Checking for build directories..."
        if [ ! -d "layout" ]; then
          echo "❌ layout directory missing!"
          exit 1
        fi
        
        if [ ! -d "appdelegate" ]; then
          echo "❌ appdelegate directory missing!"
          exit 1
        fi
        
        echo "✅ All directories present"

    - name: Build for ${{ matrix.sdk }}
      run: |
        export SDKROOT="${THEOS}/sdks/${{ matrix.sdk }}"
        export ARCHS=arm64
        
        # Set target based on SDK version
        if [[ "${{ matrix.sdk }}" == *"13."* ]]; then
          export TARGET=iphone:clang:13.0:9.0
        else
          export TARGET=iphone:clang:latest:13.0
        fi
        
        find . -name Makefile -exec sed -i "s|theos/makefiles|${THEOS}/makefiles|g" {} \;
        
        # Build tweak (using layout directory)
        cd layout
        echo "PACKAGE_VERSION = 1.0" > Makefile.common
        make package FINALPACKAGE=1 THEOS_PACKAGE_SCHEME=rootless
        
        # Build app (using appdelegate directory)
        cd ../appdelegate
        echo "PACKAGE_VERSION = 1.0" > Makefile.common
        make package FINALPACKAGE=1 THEOS_PACKAGE_SCHEME=rootless
        
        # Prepare artifacts
        cd ..
        mkdir -p artifacts
        cp layout/packages/*.deb artifacts/
        cp appdelegate/packages/*.deb artifacts/
        
        for deb in artifacts/*.deb; do
          mv "$deb" "${deb%.deb}.${{ matrix.sdk }}.deb"
        done
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: IOS13-SimulateTouch-${{ matrix.sdk }}
        path: artifacts/*.deb
        
    - name: Build Summary
      if: always()
      run: |
        echo "### 🛠️ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| SDK | Status | Artifact |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| ${{ matrix.sdk }} | ${{ job.status }} | [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY