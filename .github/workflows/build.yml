name: Build Jailbreak Tweak

on:
  workflow_dispatch:
    inputs:
      sdk-version:
        description: 'iOS SDK versions (comma separated)'
        required: false
        default: 'iphoneos13.0.sdk,iphoneos14.5.sdk,iphoneos15.4.sdk'  # Changed to lowercase
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        # FIX: Use lowercase SDK names to match actual filenames
        sdk: ['iphoneos13.0.sdk', 'iphoneos14.5.sdk', 'iphoneos15.4.sdk']
      fail-fast: false
      max-parallel: 3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Theos
      uses: actions/cache@v3
      with:
        path: ~/theos
        key: ${{ runner.os }}-theos-${{ matrix.sdk }}

    - name: Set up Theos and SDKs
      if: steps.cache-theos.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y git clang curl libxml2-dev libssl-dev python3-dev \
                               fakeroot dpkg-dev libncurses5-dev zlib1g-dev unzip \
                               automake libtool pkg-config coreutils xz-utils
        
        git clone --depth=1 https://github.com/theos/theos.git "${HOME}/theos"
        
        [ -f "${HOME}/theos/makefiles/package.mk" ] || { echo "‚ùå Theos installation failed!"; exit 1; }
        
        mkdir -p "${HOME}/theos/sdks"
        
        # FIX: Use lowercase SDK name consistently
        SDK_NAME="${{ matrix.sdk }}"
        SDK_URL="https://github.com/theos/sdks/raw/master/${SDK_NAME}.tar.xz"
        
        echo "Downloading SDK from: $SDK_URL"
        curl -L -o "${SDK_NAME}.tar.xz" "$SDK_URL" || { 
            echo "‚ùå SDK download failed"; 
            exit 1;
        }
        
        # Verify download size
        MIN_SIZE=50000000  # 50MB
        ACTUAL_SIZE=$(wc -c < "${SDK_NAME}.tar.xz")
        if [ "$ACTUAL_SIZE" -lt "$MIN_SIZE" ]; then
            echo "‚ùå Downloaded file too small (${ACTUAL_SIZE} bytes), expected SDK tarball"
            exit 1
        fi
    
        tar -xf "${SDK_NAME}.tar.xz" -C "${HOME}/theos/sdks"
        rm "${SDK_NAME}.tar.xz"
        
        # FIX: Verify using lowercase path
        [ -d "${HOME}/theos/sdks/${{ matrix.sdk }}" ] || { 
          echo "‚ùå SDK ${{ matrix.sdk }} not found after extraction!";
          echo "Contents of sdks directory:";
          ls -la "${HOME}/theos/sdks";
          exit 1;
        }

        curl -LO https://github.com/ProcursusTeam/ldid/releases/latest/download/ldid_linux_x86_64
        chmod +x ldid_linux_x86_64
        sudo mv ldid_linux_x86_64 /usr/local/bin/ldid

    - name: Configure Theos environment
      run: |
        echo "THEOS=${HOME}/theos" >> $GITHUB_ENV
        echo "${HOME}/theos/bin" >> $GITHUB_PATH
        echo "THEOS_MAKE_PATH=${HOME}/theos/makefiles" >> $GITHUB_ENV

    - name: Build for ${{ matrix.sdk }}
      run: |
        # FIX: Use lowercase SDK path
        export SDKROOT="${THEOS}/sdks/${{ matrix.sdk }}"
        export ARCHS=arm64
        export TARGET=iphone:clang:latest:13.0
        
        # Fix Makefile paths
        find . -name Makefile -exec sed -i "s|theos/makefiles|${THEOS}/makefiles|g" {} \;
        
        cd SimulateTouch
        echo "PACKAGE_VERSION = 1.0" > Makefile.common
        make package FINALPACKAGE=1 THEOS_PACKAGE_SCHEME=rootless
        
        cd ../SimulateTouchApp
        echo "PACKAGE_VERSION = 1.0" > Makefile.common
        make package FINALPACKAGE=1 THEOS_PACKAGE_SCHEME=rootless
        
        # Prepare artifacts
        cd ..
        mkdir -p artifacts
        cp SimulateTouch/packages/*.deb artifacts/
        cp SimulateTouchApp/packages/*.deb artifacts/
        
        for deb in artifacts/*.deb; do
          mv "$deb" "${deb%.deb}.${{ matrix.sdk }}.deb"
        done
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        # FIX: Update artifact name to match SDK case
        name: IOS13-SimulateTouch-${{ matrix.sdk }}
        path: artifacts/*.deb

    - name: Build Summary
      if: always()
      run: |
        echo "### üõ†Ô∏è Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| SDK | Status | Artifact |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| ${{ matrix.sdk }} | ${{ job.status }} | [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY